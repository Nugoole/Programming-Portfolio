using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.Command;
using LineScanViewer.Model;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Forms;
using System.Windows.Input;

using System.Windows.Media.Imaging;

using OpenFileDialog = Microsoft.Win32.OpenFileDialog;

namespace LineScanViewer.ViewModel
{
    internal class DependsOnPropertyAttribute : Attribute
    {
        public readonly List<string> Dependences;

        public DependsOnPropertyAttribute(params string[] otherProperties)
        {
            Dependences = otherProperties.ToList();
        }
    }

    public class VMCameraView : ViewModelBase
    {
        #region Field
        private readonly string FileDialogFormat_Bitmap = "Bitmap files(*.bmp)|*.bmp";
        private readonly string FileDialogFormat_Jpg = "Jpg files(*.jpg)|*.jpg";
        private readonly string FileDialogFormat_DCF = "DCF Files(*.dcf)|*.dcf";
        private readonly string FileDialogFormat_AllFiles = "All File(*.*)|*.*";
        private string redValue;
        private string imageFilePath;
        private string currentDCFFileDirectory;
        private bool _isCameraGrabbing;
        private MCam LineScanCamera;
        private BitmapSource image;
        private IEnumerable<string> dCFFileNames;
        private Dictionary<string, List<string>> DependencyMap;
        #endregion

        #region Property
        public string RedValue { get => redValue; set => Set(ref redValue, value); }
        public string ScanLineLength { get; set; }
        public Enums.ImageFormat ImageFormat
        {
            get => LineScanCamera.ImageFormat; set
            {
                RaisePropertyChanged();
            }
        }
        public string ImageFilePath
        {
            get => imageFilePath; set
            {
                imageFilePath = value;

                using (var bitmap = new Bitmap(value))
                {
                    var bitmapHSource = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(bitmap.GetHbitmap(), IntPtr.Zero, Int32Rect.Empty, BitmapSizeOptions.FromEmptyOptions());

                    Image = bitmapHSource;
                }

                GC.Collect();
            }
        }
        public BitmapSource Image
        {
            get => image; set
            {
                image = value;

                RaisePropertyChanged();
            }
        }
        [DependsOnProperty(nameof(IsCameraGrabbing), nameof(IsDCFSet))]
        public bool IsCameraGrabbable
        {
            get
            {
                return IsDCFSet && !IsCameraGrabbing;
            }
        }

        

        public bool IsCameraGrabbing
        {
            get
            {
                return _isCameraGrabbing;
            }

            set
            {
                Set(ref _isCameraGrabbing, value);
            }
        }

        public bool IsDCFSet
        {
            get
            {
                if (LineScanCamera != null)
                    return LineScanCamera.IsDigitizerSet;
                else
                    return false;
            }
            private set
            {
                RaisePropertyChanged();
            }
        }
        public IEnumerable<string> DCFFileNames
        {
            get => dCFFileNames; set
            {
                dCFFileNames = value;
                RaisePropertyChanged();
            }
        }
        #endregion

        #region Commands
        public ICommand DCFFileOpenClicked { get; set; }
        public ICommand SetImageFilePath { get; set; }
        public ICommand OnGrabBtnClicked { get; set; }
        public ICommand OnDCFListCBBOpened { get; set; }
        public ICommand OnDCFFileListSelected { get; set; }
        public ICommand OnToggleLiveBtn { get; set; }
        public ICommand OnImageSaveBtnClicked { get; set; }
        #endregion

        public VMCameraView()
        {
            InitLineScanCamera();
            InitCommand();
            InitDependenceAttribute();

            App.Current.Dispatcher.ShutdownStarted += Dispatcher_ShutdownStarted;
        }

        private void InitDependenceAttribute()
        {
            DependencyMap = new Dictionary<string, List<string>>();

            foreach (var property in GetType().GetProperties())
            {
                var attributes = property.GetCustomAttributes<DependsOnPropertyAttribute>();

                foreach (var dependsAttr in attributes)
                {
                    if (dependsAttr == null)
                        continue;

                    foreach (var dependence in dependsAttr.Dependences)
                    {
                        if (!DependencyMap.ContainsKey(dependence))
                            DependencyMap.Add(dependence, new List<string>());

                        DependencyMap[dependence].Add(property.Name);
                    }
                }
            }
        }

        private void InitLineScanCamera()
        {
            LineScanCamera = new MCam();
            LineScanCamera.OnGrab += LineScanCamera_OnLive;
        }

        private void InitCommand()
        {
            SetImageFilePath = new RelayCommand(SetImageFilePathAction);
            DCFFileOpenClicked = new RelayCommand(OnDCFFileOpenClickedAction);
            OnGrabBtnClicked = new RelayCommand(OnGrabBtnClickedAction);
            OnDCFListCBBOpened = new RelayCommand(OnDCFListCBBOpenedAction);
            OnDCFFileListSelected = new RelayCommand<SelectionChangedEventArgs>(OnDCFFileListSelectedAction);
            OnToggleLiveBtn = new RelayCommand<bool>(OnToggleLiveBtnAction);
            OnImageSaveBtnClicked = new RelayCommand(OnImageSaveBtnClickedAction);
        }

        private void OnImageSaveBtnClickedAction()
        {
            if (Image == null)
                return;

            SaveFileDialog dialog = new SaveFileDialog()
            {
                Filter = DialogFilterGenerator(false, FileDialogFormat_Bitmap)
            };

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                BmpBitmapEncoder encoder = new BmpBitmapEncoder();
                using (FileStream fs = new FileStream(dialog.FileName, FileMode.CreateNew))
                {
                    encoder.Frames.Add(BitmapFrame.Create(Image));
                    encoder.Save(fs);
                }
            }
        }

        private void Dispatcher_ShutdownStarted(object sender, EventArgs e)
        {
            if (LineScanCamera != null)
                LineScanCamera.CloseCam();
        }

        private void LineScanCamera_OnLive(object sender, BitmapSource e)
        {
            e.Freeze();
            App.Current.Dispatcher.Invoke(() =>
            {
                Image = e;
            });
        }

        private void OnToggleLiveBtnAction(bool obj)
        {
            IsCameraGrabbing = !obj;
            LineScanCamera.ToggleLive(!obj);
        }

        private void OnDCFFileListSelectedAction(SelectionChangedEventArgs obj)
        {
            var filePath = $@"{currentDCFFileDirectory}\{obj.AddedItems[0]}";

            LineScanCamera.DCFFileSet(filePath);
            IsDCFSet = true;
            ImageFormat = LineScanCamera.ImageFormat;
        }



        private void OnDCFListCBBOpenedAction()
        {
            if (!string.IsNullOrEmpty(currentDCFFileDirectory))
            {
                DirectoryInfo info = new DirectoryInfo(currentDCFFileDirectory);
                DCFFileNames = info.GetFiles("*.dcf").Select(x => x.Name);
            }
        }



        private void OnGrabBtnClickedAction()
        {
            if (LineScanCamera.IsDigitizerSet)
            {
                if (int.TryParse(ScanLineLength, out int result))
                {
                    IsCameraGrabbing = true;
                    LineScanCamera.Grab(result);
                    IsCameraGrabbing = false;
                }
            }
        }

        private void OnDCFFileOpenClickedAction()
        {
            FolderBrowserDialog dialog = new FolderBrowserDialog();
            dialog.Description = "DCF 파일이 저장된 폴더를 선택해주세요";
            var dialogResult = dialog.ShowDialog();
            if (dialogResult == DialogResult.OK)
            {
                currentDCFFileDirectory = dialog.SelectedPath;
            }
        }

        private void SetImageFilePathAction()
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = DialogFilterGenerator(true, FileDialogFormat_Bitmap, FileDialogFormat_Jpg);
            dialog.FilterIndex = 0;

            var dialogResult = dialog.ShowDialog();
            if (dialogResult.HasValue && dialogResult.Value)
            {
                ImageFilePath = dialog.FileName;
            }
        }

        private string DialogFilterGenerator(bool createAllFileFilter, params string[] filters)
        {
            StringBuilder dialogFilter = new StringBuilder();

            foreach (var filter in filters)
            {
                if (dialogFilter.ToString().Contains(filter))
                    continue;

                dialogFilter.Append(filter);
                if (!filters.ElementAt(filters.Count() - 1).Equals(filter))
                    dialogFilter.Append('|');
            }

            if (createAllFileFilter)
                dialogFilter.Append('|' + FileDialogFormat_AllFiles);

            return dialogFilter.ToString();
        }

        public override void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            base.RaisePropertyChanged(propertyName);

            if (!DependencyMap.ContainsKey(propertyName))
                return;


            foreach (var dependentPropertyName in DependencyMap[propertyName])
            {
                RaisePropertyChanged(dependentPropertyName);
            }
        }
    }

    [ValueConversion(typeof(bool), typeof(string))]
    public class BoolToSetStringConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (!bool.TryParse(value.ToString(), out bool result))
                return null;
            else
            {
                if (result)
                    return "Set";
                else
                    return "Not Set";
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    [ValueConversion(typeof(bool), typeof(bool))]
    public class BoolInverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (!bool.TryParse(value.ToString(), out bool result))
                return null;
            else
            {
                return !result;
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

    [ValueConversion(typeof(object), typeof(string))]
    public class ObjectToStringConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value.ToString();
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (targetType.IsEnum)
                return Enum.Parse(targetType, value.ToString());

            return System.Convert.ChangeType(value, targetType);
        }
    }
}


